#programme réalisé par le groupe 62

from numpy import *
import matplotlib.pyplot as plt

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#FONCTION
def calcul_M(N1,N2,R1,R2,diametrefil,distance,mu=4*10**(-7)):
    ''' pré : le nombre de tour des deux bobines, leur rayon central, le diamètre du fil, la distance les séparant et optionnellement la perméabilité magnétique '''
    ''' post : l'inductance mutuelle de sees deux bobines '''
    B=0
    bb=mu/2
    # calcul du champ magnétique créé par la première bobine en sommant celui de chacune de ses spires (on enlève le I car il va se simplifier à la fin)
    for i in range(N1):
        Ray=R1+i*diametrefil
        b=bb*Ray**2/(Ray**2+distance**2)**(3/2)
        B+=b
    Phi_B=0
    # calcul du flux magnétique perçu par la seconde bobine en sommant celui perçu par chacune de ses spires
    for i in range(N2):
        Ray=R2+i*diametrefil
        Phi_B+=B*pi*Ray**2
    M=Phi_B#on ne divise pas par I car on a pas multiplier au début
    return M,B


def calcul_L(N,R,diametrefil,mu=4*10**(-7)):
    ''' pré : le nombre de tour, le rayon central, le diamètre du fil et optionnellement la perméabilité magnétique de la bobine '''
    ''' post : l'inductance propre de cette bobine '''
    B=0
     # calcul du champ magnétique créé par la bobine en sommant celui de chacune de ses spires (on enlève le I car il va se simplifier à la fin)
    for i in range(N):
        Ray= R+i*diametrefil
        B+=mu/2/Ray
    L=0
    # calcul du flux magnétique perçu par la bobine en sommant celui perçu par chacune de ses spires
    for i in range(N):
        Ray=R+i*diametrefil
        L+=B*pi*Ray**2
    return L


def composante(L1,L2,M,R1,Rz):
    '''  pré : les trois inductances, la résistance et l'impédance (considérée réeelle) '''
    ''' post : les deux capacités et omega '''
    omega=sqrt(Rz*Rz*Rz*M*M*R1-L2*L2*R1*R1*Rz*Rz)/(M*M*Rz)
    C2=(sqrt(R1*Rz-omega**2*M*M))/(Rz*M*omega**2)
    C1=1/(L1*omega**2)
    print("C1={} , C2={} et omega={}".format(C1,C2,omega))
    return C1,C2,omega


def calculphaseur(Vs,R1,L1,C1,L2,C2,M,Z,w):
    ''' pré : Vs et les diverses composants du bloc transfert de puissance '''
    ''' post : les phaseurs de V2, I2 et I1 '''
    jw=1j*w
    a=R1+w*w*M*M/(jw*L2+1/(1/Z+jw*C2))+1/(jw*C1)+jw*L1
    I1=Vs/a
    I2=jw*M*I1/(jw*L2+1/(1/Z+jw*C2))
    V2=I2/(1/Z+jw*C2)
    return V2,I2,I1


def calculcapa(omega,R=10000):
    ''' pré : omega et optionnelement la résistance de feedback allant de la sortie à la borne - '''
    ''' post : la capacité nécessaire''' 
    f=omega/(2*pi)
    C=1/(2*f*R*log(2))
    return C


#--------------------------------------------------------------------------------------------------------------------------
#Recherche des composantes

L1=47e-6
L2=49.99875e-6
M=5e-6
R1=10
Rz=1000
C1,C2,w=composante(L1,L2,M,R1,Rz)
b=calculphaseur(4,R1,L1,C1,L2,C2,M,Rz,w)
C=calculcapa(w)
print("C1={} , C2={} , f={} , C_oscillateur={} pour L1={} , L2={} , M={} , R1={} et Rz={}".format(C1,C2,w/2/pi,C,L1,L2,M,R1,Rz))

#--------------------------------------------------------------------------------------------------------------------------------------
# V2 en fonction de la distance entre les bobines

N1=53
N2=54
ray=0.005
dia_fil=0.0005
L2=calcul_L(N2,ray,dia_fil)
L1=calcul_L(N1,ray,dia_fil)
x=linspace(0.015,0.05,1000)
y=zeros(1000)
for i in range(1000):
    distance=x[i]
    M=calcul_M(N1,N2,ray,ray,dia_fil,distance)[0]
    y[i]=abs(calculphaseur(4,R1,L1,C1,L2,C2,M,Rz,w)[0])
plt.plot(x*100,y/5)
plt.plot([1.5,2,2.5,3,4,5],[3.2,2.425,1.705,1.06,0.592,0.212],'.r')
plt.title('V2 en fonction de la distance entre les bobines')
plt.ylabel('V')
plt.xlabel('cm')
plt.show()
L1=47e-6
L2=49.99875e-6
M=5e-6

#----------------------------------------------------------------------------------------------------------------------------------------------------
# V2 en fonction de la fréquence (en faisant varier la résistance de feedback dans le bloc oscillateur)

x=linspace(6000,13000,1000)
y=zeros(1000)
for i in range(1000):
    R=x[i]
    f=1/(2*C*R*log(2))
    wi=2*pi*f
    y[i]=abs(calculphaseur(4,R1,L1,C1,L2,C2,M,Rz,wi)[0])
plt.plot(x,y/5)
plt.plot([6600,8800,10000,11000,12200],[0.3568,1.776,3.213,1.588,0.722],'.r')
plt.title('V2 en fonction de la résistance qui détermine la fréquence')
plt.ylabel('V')
plt.xlabel('Ohm')
plt.show()
f=1/(2*3.33e-9*10000*log(2))
print(f)
#---------------------------------------------------------------------------------------------------------------------------------------------------------
# V2 en fonction de C1

x=linspace(1e-8,1e-4,10000)
y=zeros(10000)
for i in range(10000):
    C1i=x[i]
    y[i]=abs(calculphaseur(4,R1,L1,C1i,L2,C2,M,Rz,w)[0])
plt.plot(log10(x),y/5)
a=array([0.1,0.2,0.3,0.5,1,2,3,4,5])*1e-6
plt.plot(log10(a),[0.8,1.54,1.96,2.95,3.4,3.35,3.2,3.04,2.94],'.r')
plt.title('V2 en fonction de C1')
plt.ylabel('V')
plt.xlabel('log(C) F')
plt.show()

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
# V2 en fonction de C2

x=linspace(1e-7,1e-5,10000)
y=zeros(10000)
for i in range(10000):
    C2i=x[i]
    y[i]=abs(calculphaseur(4,R1,L1,C1,L2,C2i,M,Rz,w)[0])
plt.plot(log10(x),y/5)
plt.plot(log10(array([0.33,0.5,1,1.5,2])*1e-6),[0.42,0.5,3.4,0.73,0.24],'r.')
plt.title('V2 en fonction de C2')
plt.ylabel('V')
plt.xlabel('log(C) F')
plt.show()
